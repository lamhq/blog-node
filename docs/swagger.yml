openapi: "3.0.0"
info:
  title: FlexiWaste API
  description: "This is the api specification for FlexiWaste project."
  version: "1.0"
servers:
  - url: http://localhost:3000/api/v1
    description: Internal staging server for testing
  - url: http://api.example.com/v1
    description: Main (production) server
tags:
  - name: Account
    description: Operations about account
paths:
  /account/sessions:
    post:
      tags:
      - Account
      summary: Logs user into the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: "demo@example.com"
                password:
                  type: string
                  example: "123123"
      responses:
        200:
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/400'

  /account/profile:
    get:
      tags:
      - Account
      security:
        - bearerAuth: []
      summary: Get your account information
      responses:
        200:
          description: account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401'
    put:
      tags:
      - Account
      security:
        - bearerAuth: []
      summary: Update your account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: updated account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401'

  /account/password-reset/request:
    post:
      tags:
      - Account
      summary: Make a new password reset request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "demo@example.com"
      responses:
        200:
          description: Action completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."
  /account/password:
    put:
      tags:
      - Account
      summary: Update account password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: "reset password token"
                password:
                  type: string
                  description: "new password"
                  example: "123123"
                verify:
                  type: string
                  description: "password repeated"
                  example: "123123"
      responses:
        200:
          description: Action completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."

  /account/registrations:
    post:
      tags:
      - Account
      summary: Register a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Saved user account data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /token:
    post:
      tags:
      - Account
      summary: Return new access token
      responses:
        200:
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /posts:
    get:
      tags:
        - Weather Forecast
      summary: Gets the full weather forecast details.
      description: Get weather forecast in abundant details including nearly every category of information, including wind, atmosphere, astronomy, forecast, and more.
      operationId: GetWeatherData
      externalDocs:
        description: More details
        url: "https://market.mashape.com/fyhao/weather-13#weatherdata"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                description: Successful operation
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404'

components:
  responses:
    400:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: object
            example: Not found
    401:
      description: Access token is missing or invalid
    404:
      description: Not found
      content:
        text/plain:
          schema:
            type: string
            description: Not found
            example: Not found

  schemas:
    LoginResponse:
      title: login response
      type: object
      properties:
        token:
          type: object
          properties:
            value:
              type: string
            expiredAt:
              type: string
        userType:
          type: string
        id:
          type: string

    User:
      title: user data
      type: object
      properties:
        _id:
          type: string
        email:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
